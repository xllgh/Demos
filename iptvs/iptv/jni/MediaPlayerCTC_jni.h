// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/yinhe/android/iptv/MediaPlayerCTC

#ifndef com_yinhe_android_iptv_MediaPlayerCTC_JNI
#define com_yinhe_android_iptv_MediaPlayerCTC_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kMediaPlayerCTCClassPath[] = "com/yinhe/android/iptv/MediaPlayerCTC";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_MediaPlayerCTC_clazz __attribute__((unused)) = 0;
#define MediaPlayerCTC_clazz(env) base::android::LazyGetClass(env, kMediaPlayerCTCClassPath, &g_MediaPlayerCTC_clazz)

}  // namespace

namespace content {
namespace iptv {

// Step 2: method stubs.

static base::subtle::AtomicWord g_MediaPlayerCTC_Create = 0;
static jboolean Java_MediaPlayerCTC_Create(JNIEnv* env, JniIntWrapper playerId)
    {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "Create",

"("
"I"
")"
"Z",
      &g_MediaPlayerCTC_Create);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_PlayByTime = 0;
static jboolean Java_MediaPlayerCTC_PlayByTime(JNIEnv* env, JniIntWrapper
    playerId,
    const base::android::JavaRefOrBare<jstring>& mediaUrl,
    const base::android::JavaRefOrBare<jstring>& timestamp) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "PlayByTime",

"("
"I"
"Ljava/lang/String;"
"Ljava/lang/String;"
")"
"Z",
      &g_MediaPlayerCTC_PlayByTime);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId), mediaUrl.obj(), timestamp.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_Seek = 0;
static jboolean Java_MediaPlayerCTC_Seek(JNIEnv* env, JniIntWrapper playerId,
    const base::android::JavaRefOrBare<jstring>& timestamp) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "Seek",

"("
"I"
"Ljava/lang/String;"
")"
"Z",
      &g_MediaPlayerCTC_Seek);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId), timestamp.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_Pause = 0;
static jboolean Java_MediaPlayerCTC_Pause(JNIEnv* env, JniIntWrapper playerId) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "Pause",

"("
"I"
")"
"Z",
      &g_MediaPlayerCTC_Pause);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_Resume = 0;
static jboolean Java_MediaPlayerCTC_Resume(JNIEnv* env, JniIntWrapper playerId)
    {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "Resume",

"("
"I"
")"
"Z",
      &g_MediaPlayerCTC_Resume);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_GotoEnd = 0;
static jboolean Java_MediaPlayerCTC_GotoEnd(JNIEnv* env, JniIntWrapper playerId)
    {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "GotoEnd",

"("
"I"
")"
"Z",
      &g_MediaPlayerCTC_GotoEnd);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_GotoStart = 0;
static jboolean Java_MediaPlayerCTC_GotoStart(JNIEnv* env, JniIntWrapper
    playerId) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "GotoStart",

"("
"I"
")"
"Z",
      &g_MediaPlayerCTC_GotoStart);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_Stop = 0;
static jboolean Java_MediaPlayerCTC_Stop(JNIEnv* env, JniIntWrapper playerId) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "Stop",

"("
"I"
")"
"Z",
      &g_MediaPlayerCTC_Stop);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_GetMediaDuration = 0;
static jlong Java_MediaPlayerCTC_GetMediaDuration(JNIEnv* env, JniIntWrapper
    playerId) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "GetMediaDuration",

"("
"I"
")"
"J",
      &g_MediaPlayerCTC_GetMediaDuration);

  jlong ret =
      env->CallStaticLongMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_GetCurrentPlayTime = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_MediaPlayerCTC_GetCurrentPlayTime(JNIEnv* env, JniIntWrapper playerId)
    {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "GetCurrentPlayTime",

"("
"I"
")"
"Ljava/lang/String;",
      &g_MediaPlayerCTC_GetCurrentPlayTime);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_MediaPlayerCTC_RefreshVideoDisplay = 0;
static jboolean Java_MediaPlayerCTC_RefreshVideoDisplay(JNIEnv* env,
    JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper width,
    JniIntWrapper height) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "RefreshVideoDisplay",

"("
"I"
"I"
"I"
"I"
")"
"Z",
      &g_MediaPlayerCTC_RefreshVideoDisplay);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(x), as_jint(y), as_jint(width), as_jint(height));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_FastForward = 0;
static jboolean Java_MediaPlayerCTC_FastForward(JNIEnv* env, JniIntWrapper
    playerId,
    jfloat speed) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "FastForward",

"("
"I"
"F"
")"
"Z",
      &g_MediaPlayerCTC_FastForward);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId), speed);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_FastRewind = 0;
static jboolean Java_MediaPlayerCTC_FastRewind(JNIEnv* env, JniIntWrapper
    playerId,
    jfloat speed) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "FastRewind",

"("
"I"
"F"
")"
"Z",
      &g_MediaPlayerCTC_FastRewind);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId), speed);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_SetMuteFlag = 0;
static jboolean Java_MediaPlayerCTC_SetMuteFlag(JNIEnv* env, JniIntWrapper
    playerId,
    JniIntWrapper flag) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "SetMuteFlag",

"("
"I"
"I"
")"
"Z",
      &g_MediaPlayerCTC_SetMuteFlag);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId), as_jint(flag));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_SetVolume = 0;
static jboolean Java_MediaPlayerCTC_SetVolume(JNIEnv* env, JniIntWrapper
    playerId,
    JniIntWrapper volume) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "SetVolume",

"("
"I"
"I"
")"
"Z",
      &g_MediaPlayerCTC_SetVolume);

  jboolean ret =
      env->CallStaticBooleanMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId), as_jint(volume));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_MediaPlayerCTC_GetVolume = 0;
static jint Java_MediaPlayerCTC_GetVolume(JNIEnv* env, JniIntWrapper playerId) {
  CHECK_CLAZZ(env, MediaPlayerCTC_clazz(env),
      MediaPlayerCTC_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, MediaPlayerCTC_clazz(env),
      "GetVolume",

"("
"I"
")"
"I",
      &g_MediaPlayerCTC_GetVolume);

  jint ret =
      env->CallStaticIntMethod(MediaPlayerCTC_clazz(env),
          method_id, as_jint(playerId));
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

}  // namespace iptv
}  // namespace content

#endif  // com_yinhe_android_iptv_MediaPlayerCTC_JNI
