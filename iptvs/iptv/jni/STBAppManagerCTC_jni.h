// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     com/yinhe/android/iptv/STBAppManagerCTC

#ifndef com_yinhe_android_iptv_STBAppManagerCTC_JNI
#define com_yinhe_android_iptv_STBAppManagerCTC_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"

#include "base/android/jni_int_wrapper.h"

// Step 1: forward declarations.
namespace {
const char kSTBAppManagerCTCClassPath[] =
    "com/yinhe/android/iptv/STBAppManagerCTC";
// Leaking this jclass as we cannot use LazyInstance from some threads.
base::subtle::AtomicWord g_STBAppManagerCTC_clazz __attribute__((unused)) = 0;
#define STBAppManagerCTC_clazz(env) base::android::LazyGetClass(env, kSTBAppManagerCTCClassPath, &g_STBAppManagerCTC_clazz)

}  // namespace

namespace content {
namespace iptv {

// Step 2: method stubs.

static base::subtle::AtomicWord g_STBAppManagerCTC_isAppInstalled = 0;
static jboolean Java_STBAppManagerCTC_isAppInstalled(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& appName) {
  CHECK_CLAZZ(env, STBAppManagerCTC_clazz(env),
      STBAppManagerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, STBAppManagerCTC_clazz(env),
      "isAppInstalled",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_STBAppManagerCTC_isAppInstalled);

  jboolean ret =
      env->CallStaticBooleanMethod(STBAppManagerCTC_clazz(env),
          method_id, appName.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_STBAppManagerCTC_getAppVersion = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_STBAppManagerCTC_getAppVersion(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& appName) {
  CHECK_CLAZZ(env, STBAppManagerCTC_clazz(env),
      STBAppManagerCTC_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, STBAppManagerCTC_clazz(env),
      "getAppVersion",

"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_STBAppManagerCTC_getAppVersion);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(STBAppManagerCTC_clazz(env),
          method_id, appName.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_STBAppManagerCTC_startAppByName = 0;
static jboolean Java_STBAppManagerCTC_startAppByName(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& appName) {
  CHECK_CLAZZ(env, STBAppManagerCTC_clazz(env),
      STBAppManagerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, STBAppManagerCTC_clazz(env),
      "startAppByName",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_STBAppManagerCTC_startAppByName);

  jboolean ret =
      env->CallStaticBooleanMethod(STBAppManagerCTC_clazz(env),
          method_id, appName.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_STBAppManagerCTC_restartAppByName = 0;
static jboolean Java_STBAppManagerCTC_restartAppByName(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& appName) {
  CHECK_CLAZZ(env, STBAppManagerCTC_clazz(env),
      STBAppManagerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, STBAppManagerCTC_clazz(env),
      "restartAppByName",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_STBAppManagerCTC_restartAppByName);

  jboolean ret =
      env->CallStaticBooleanMethod(STBAppManagerCTC_clazz(env),
          method_id, appName.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_STBAppManagerCTC_startAppByIntent = 0;
static jboolean Java_STBAppManagerCTC_startAppByIntent(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& intentMessage) {
  CHECK_CLAZZ(env, STBAppManagerCTC_clazz(env),
      STBAppManagerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, STBAppManagerCTC_clazz(env),
      "startAppByIntent",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_STBAppManagerCTC_startAppByIntent);

  jboolean ret =
      env->CallStaticBooleanMethod(STBAppManagerCTC_clazz(env),
          method_id, intentMessage.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_STBAppManagerCTC_installApp = 0;
static jboolean Java_STBAppManagerCTC_installApp(JNIEnv* env, const
    base::android::JavaRefOrBare<jstring>& apkUrl) {
  CHECK_CLAZZ(env, STBAppManagerCTC_clazz(env),
      STBAppManagerCTC_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, STBAppManagerCTC_clazz(env),
      "installApp",

"("
"Ljava/lang/String;"
")"
"Z",
      &g_STBAppManagerCTC_installApp);

  jboolean ret =
      env->CallStaticBooleanMethod(STBAppManagerCTC_clazz(env),
          method_id, apkUrl.obj());
  jni_generator::CheckException(env);
  return ret;
}

// Step 3: RegisterNatives.

}  // namespace iptv
}  // namespace content

#endif  // com_yinhe_android_iptv_STBAppManagerCTC_JNI
